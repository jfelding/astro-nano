---
import ProjectArrowCard from "@components/ProjectArrowCard.astro";
import {
    type Project,
    type Category,
    allCategories,
} from "../../project.type.ts";
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";

const projects = (await getCollection("projects"))
  .filter((project) => !project.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

export let selectedCategories: Category[] = [];
---

<script context="module">
    // This function will run when the component mounts
    export function onMount(callback) {
        callback();
        // Fetch project data from an API or JSON file if needed
    }
</script>

<h1>Projects Overview</h1>

<!-- Checkboxes for filtering -->
<label
    ><input
        type="checkbox"
        onchange="toggleCategory(this.value)"
        value="Web Development"
    /> Web Development</label
>
<label
    ><input
        type="checkbox"
        onchange="toggleCategory(this.value)"
        value="Design"
    /> Design</label
>
<!-- Add more checkboxes for other categories -->

<!-- Display filtered projects using ProjectArrowCard component -->
<astro:fragment>
    <!-- JavaScript function to toggle selected categories -->
    <script>
        function toggleCategory(category) {
            const index = selectedCategories.indexOf(category);
            if (index === -1) {
                selectedCategories.push(category);
            } else {
                selectedCategories.splice(index, 1);
            }
            render();
        }
    </script>

    <!-- Render filtered projects -->
    <astro:each items="{ filterProjects() }" as="project">
        <ProjectArrowCard project={project} />
    </astro:each>
</astro:fragment>

<script>
    // Function to filter projects based on selected categories
    function filterProjects() {
        if (selectedCategories.length === 0) {
            return projects;
        } else {
            return projects.filter((project) =>
                selectedCategories.includes(project.category),
            );
        }
    }
</script>

<PageLayout title={PROJECTS.TITLE} description={PROJECTS.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
        Projects & Ideas
      </div>
      <div>
        {
          allCategories.map((category: Category) => (
            <label>
              <input
                type="checkbox"
                value={category.toString()}
                :onchange={(event: Event) => handleCategoryChange(event)}
                checked={selectedCategories.includes(category)}
              />
              {category}
            </label>
          ))
        }
      </div>
      <ul class="animate flex flex-col gap-4">
        {
          projects.map((project) => (
            <li>
              <ProjectArrowCard
                entry={project}
                statusRating={project.data.statusRating}
                timeInvestmentRating={project.data.timeInvestmentRating}
                necessityRating={project.data.necessityRating}
                categories={project.data.categories as Category[] || []}  )  
              />
            </li>
          ))
        }
      </ul>
    </div>
  </Container>
</PageLayout>