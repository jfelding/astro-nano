---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";
import {
  Category,
  loadIdeaFromFilename,
  loadOutputFromFilename,
} from "src/project.type";
import {
  getRatingEmoji,
  getStatusEmoji,
  getStatusDescriptor,
  getRatingDescriptor,
  getCategoryEmoji,
} from "src/lib/utils";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate">
      <BackToPrev href="/projects"> Back to projects </BackToPrev>
    </div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {project.data.title}
      </div>

      <div
        style="width:fit-content"
        class="p-4 rounded-lg animate dark:border-white/50 hover:bg-black/5 dark:hover:bg-white/5 hover:text-black dark:hover:text-white"
      >
        {
          project.data.demoURL && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Demo:
              </span>
              <span class="ml-2">üèÜ </span>
              <span class="ml-2">
                <Link href={project.data.repoURL} external>
                  {project.data.demoURL}
                </Link>
              </span>
            </span>
          )
        }
        {
          project.data.repoURL && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Demo:
              </span>
              <span class="ml-2">üßë‚Äçüíª </span>
              <span class="ml-2">
                <Link href={project.data.repoURL} external>
                  {project.data.repoURL}
                </Link>
              </span>
            </span>
          )
        }

        {
          project.data.statusRating && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Project Status:
              </span>
              <span class="ml-2">
                {getStatusEmoji(project.data.statusRating)}
              </span>
              <span class="ml-2">
                {getStatusDescriptor(project.data.statusRating)}
              </span>
            </span>
          )
        }
        {
          project.data.necessityRating && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Necessity:
              </span>
              <span class="ml-2">
                {getRatingEmoji(project.data.necessityRating)}
              </span>
              <span class="ml-2">
                {getRatingDescriptor(project.data.necessityRating)}
              </span>
            </span>
          )
        }
        {
          project.data.timeInvestmentRating && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Time Investment:
              </span>
              <span class="ml-2">
                {getRatingEmoji(project.data.timeInvestmentRating)}
              </span>
              <span class="ml-2">
                {getRatingDescriptor(project.data.timeInvestmentRating)}
              </span>
            </span>
          )
        }
        {
          project.data.categories && (
            <span class="flex">
              <span class="font-bold" style="width: 150px;">
                Categories:
              </span>
              <span class="ml-2">
                {project.data.categories
                  .map(
                    (category: Category) =>
                      getCategoryEmoji(category) + "  " + category
                  )
                  .join("; ")}
              </span>
            </span>
          )
        }
        {
          project.data.relatedIdeaFiles &&
            project.data.relatedIdeaFiles.length > 0 && (
              <div class="flex">
                <span class="font-bold" style="width: 150px;">
                  Related Ideas:
                </span>
                {project.data.relatedIdeaFiles
                  .map((ideaFilename: string, index: number) => {
                    // Fetch the idea title from the filename
                    const ideaTitle = loadIdeaFromFilename(ideaFilename);

                    const filenameWithoutExtension = ideaFilename.replace(
                      /\.(md|mdx)$/,
                      ""
                    );

                    const ideaURL = `../ideas/${filenameWithoutExtension}`;

                    return (
                      <>
                        <span class="ml-2">
                          <Link href={ideaURL} external>
                            {ideaTitle || filenameWithoutExtension}
                          </Link>
                        </span>
                        {index !== project.data.relatedIdeaFiles.length - 1 && (
                          <span class="mx-1">,</span>
                        )}
                      </>
                    );
                  })
                  .reduce((prev: any[], curr: any, index: number) => {
                    return index < project.data.relatedIdeaFiles.length - 1
                      ? prev.concat([curr, <span class="mx-1">,</span>])
                      : prev.concat(curr);
                  }, [])}
              </div>
            )
        }
        {
          project.data.relatedOutputFiles &&
            project.data.relatedOutputFiles.length > 0 && (
              <div class="flex">
                <span class="font-bold" style="width: 150px;">
                  Related Outputs:
                </span>
                {project.data.relatedOutputFiles
                  .map((outputFilename: string, index: number) => {
                    // Fetch the output title from the filename
                    const outputTitle = loadOutputFromFilename(outputFilename);

                    const filenameWithoutExtension = outputFilename.replace(
                      /\.(md|mdx)$/,
                      ""
                    );

                    const outputURL = `../blog/${filenameWithoutExtension}`;

                    return (
                      <>
                        <span class="ml-2">
                          <Link href={outputURL} external>
                            {outputTitle || filenameWithoutExtension}
                          </Link>
                        </span>
                        {index !==
                          project.data.relatedOutputFiles.length - 1 && (
                          <span class="mx-1">,</span>
                        )}
                      </>
                    );
                  })
                  .reduce((prev: any[], curr: any, index: number) => {
                    return index < project.data.relatedOutputFiles.length - 1
                      ? prev.concat([curr, <span class="mx-1">,</span>])
                      : prev.concat(curr);
                  }, [])}
              </div>
            )
        }
      </div>
    </div>

    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>
